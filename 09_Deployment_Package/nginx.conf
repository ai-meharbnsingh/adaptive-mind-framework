# 09_Deployment_Package/nginx.conf
# Production Nginx configuration for Adaptive Mind Framework

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=demo:10m rate=5r/s;

    # Upstream backend
    upstream adaptive_mind_backend {
        server adaptive-mind-app:8000;
        keepalive 32;
    }

    server {
        listen 80;
        server_name _;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name demo.adaptivemind.ai eval.adaptivemind.ai;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
        ssl_prefer_server_ciphers off;

        # Main application
        location / {
            limit_req zone=demo burst=20 nodelay;

            proxy_pass http://adaptive_mind_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API endpoints
        location /api/ {
            limit_req zone=api burst=50 nodelay;

            proxy_pass http://adaptive_mind_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket support
        location /ws {
            proxy_pass http://adaptive_mind_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            access_log off;
            proxy_pass http://adaptive_mind_backend;
        }

        # Metrics endpoint (restricted)
        location /metrics {
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;

            proxy_pass http://adaptive_mind_backend;
        }
    }
}

---
# 09_Deployment_Package/supervisord.conf
# Supervisor configuration for managing multiple processes

[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:adaptive-mind-app]
command=gunicorn demo_backend:app --worker-class uvicorn.workers.UvicornWorker --workers 4 --bind 0.0.0.0:8000 --timeout 120 --keepalive 2 --max-requests 1000 --max-requests-jitter 100
directory=/app
user=adaptivemind
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/app/logs/app.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/app/logs/nginx.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10

[program:prometheus-exporter]
command=python -m prometheus_client.exposition 9090
directory=/app
user=adaptivemind
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/app/logs/metrics.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=5

[program:security-monitor]
command=python 09_Deployment_Package/security_monitoring.py
directory=/app
user=adaptivemind
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/app/logs/security.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=10

---
# 09_Deployment_Package/healthcheck.py
#!/usr/bin/env python3
"""
Health check script for Adaptive Mind Framework container
"""

import sys
import time
import asyncio
import aiohttp
import json
from typing import Dict, Any

async def check_endpoint(session: aiohttp.ClientSession, url: str, timeout: int = 10) -> Dict[str, Any]:
    """Check a single endpoint"""
    try:
        async with session.get(url, timeout=aiohttp.ClientTimeout(total=timeout)) as response:
            if response.status == 200:
                try:
                    data = await response.json()
                    return {"status": "healthy", "response_time": time.time(), "data": data}
                except:
                    text = await response.text()
                    return {"status": "healthy", "response_time": time.time(), "data": text[:100]}
            else:
                return {"status": "unhealthy", "status_code": response.status}
    except Exception as e:
        return {"status": "unhealthy", "error": str(e)}

async def main():
    """Main health check function"""
    base_url = "http://localhost:8000"

    endpoints = [
        f"{base_url}/health",
        f"{base_url}/metrics"
    ]

    async with aiohttp.ClientSession() as session:
        results = {}

        for endpoint in endpoints:
            results[endpoint] = await check_endpoint(session, endpoint)

        # Check overall health
        all_healthy = all(result["status"] == "healthy" for result in results.values())

        if all_healthy:
            print("Health check passed")
            sys.exit(0)
        else:
            print(f"Health check failed: {json.dumps(results, indent=2)}")
            sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())

---
# 09_Deployment_Package/grafana_datasources.yml
# Grafana datasource configuration

apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    editable: true

---
# 09_Deployment_Package/fluentd.conf
# Fluentd configuration for log aggregation

<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

<match adaptive.mind.**>
  @type file
  path /fluentd/logs/adaptive-mind
  append true
  time_slice_format %Y%m%d
  time_slice_wait 10m
  time_format %Y%m%dT%H%M%S%z
  compress gzip
</match>

<match **>
  @type stdout
</match>