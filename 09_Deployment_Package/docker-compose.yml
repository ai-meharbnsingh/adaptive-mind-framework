# 09_Deployment_Package/docker-compose.yml
# Development environment for Adaptive Mind Framework
# Complete stack with monitoring, database, and caching

version: '3.8'

networks:
  adaptive-mind-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  app_logs:
    driver: local

services:
  # Main Application Service
  adaptive-mind-app:
    build:
      context: ..
      dockerfile: 09_Deployment_Package/Dockerfile
      target: development
    container_name: adaptive-mind-app
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
      - "9100:9100"  # Node exporter
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://adaptivemind:dev_password_2024@postgres:5432/adaptivemind_dev
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
      - METRICS_ENABLED=true
      - PROMETHEUS_PORT=9090
      - NODE_EXPORTER_PORT=9100
      - AZURE_KEY_VAULT_URL=${AZURE_KEY_VAULT_URL:-}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET:-}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-demo_key}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-demo_key}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-demo_key}
    volumes:
      - ../:/app
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - adaptive-mind-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: adaptive-mind-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=adaptivemind_dev
      - POSTGRES_USER=adaptivemind
      - POSTGRES_PASSWORD=dev_password_2024
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../05_Database_Layer/migrations:/docker-entrypoint-initdb.d
    networks:
      - adaptive-mind-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adaptivemind -d adaptivemind_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: adaptive-mind-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - adaptive-mind-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: adaptive-mind-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus_config.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - adaptive-mind-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: adaptive-mind-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana_dashboards.json:/etc/grafana/provisioning/dashboards/adaptive-mind-dashboard.json:ro
      - ./grafana_datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - adaptive-mind-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: adaptive-mind-node-exporter
    ports:
      - "9101:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - adaptive-mind-network
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: adaptive-mind-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - adaptive-mind-network
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg

  # Nginx Load Balancer (for production-like testing)
  nginx:
    image: nginx:alpine
    container_name: adaptive-mind-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - app_logs:/var/log/nginx
    networks:
      - adaptive-mind-network
    restart: unless-stopped
    depends_on:
      - adaptive-mind-app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: adaptive-mind-fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/fluentd/logs
    networks:
      - adaptive-mind-network
    restart: unless-stopped

# Development helper scripts
x-dev-scripts: &dev-scripts
  setup: |
    # Setup development environment
    docker-compose up -d postgres redis
    sleep 10
    docker-compose exec postgres psql -U adaptivemind -d adaptivemind_dev -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"
    docker-compose up -d

  logs: |
    # View application logs
    docker-compose logs -f adaptive-mind-app

  shell: |
    # Access application shell
    docker-compose exec adaptive-mind-app bash

  test: |
    # Run tests
    docker-compose exec adaptive-mind-app python -m pytest

  metrics: |
    # Open metrics dashboard
    echo "Prometheus: http://localhost:9091"
    echo "Grafana: http://localhost:3000 (admin/admin123)"
    echo "App Metrics: http://localhost:8000/metrics"

  cleanup: |
    # Clean up development environment
    docker-compose down -v
    docker system prune -f